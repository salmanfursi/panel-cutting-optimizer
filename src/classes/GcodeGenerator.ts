// import type { OptimizationResult, PlacedPanel } from "src/types/types";

import type { OptimizationResult, PlacedPanel } from "/types/types";
 
// import type { OptimizationResult, PlacedPanel } from "types/types";

// interface GcodeSettings {
//   feedRate: number;
//   plungeRate: number;
//   cutDepth: number;
//   safeHeight: number;
//   toolDiameter: number;
// }

// export class GcodeGenerator {
//   private settings: GcodeSettings;

//   constructor(settings: Partial<GcodeSettings> = {}) {
//     this.settings = {
//       feedRate: settings.feedRate || 1000, // Cutting feed rate (mm/min)
//       plungeRate: settings.plungeRate || 200, // Plunge feed rate (mm/min)
//       cutDepth: settings.cutDepth || -3, // Cut depth (mm)
//       safeHeight: settings.safeHeight || 5, // Safe travel height (mm)
//       toolDiameter: settings.toolDiameter || 3.175, // Tool diameter in mm (1/8")
//     };
//   }

//   generateGcode(result: OptimizationResult): string {
//     let gcode: string[] = [];

//     // Header
//     gcode.push(";Panel Cutting G-code");
//     gcode.push(";Generated by Panel Cutting Optimizer");
//     gcode.push(`
// ;Settings:
// ;Feed Rate: ${this.settings.feedRate} mm/min
// ;Plunge Rate: ${this.settings.plungeRate} mm/min
// ;Cut Depth: ${this.settings.cutDepth} mm
// ;Safe Height: ${this.settings.safeHeight} mm
// ;Tool Diameter: ${this.settings.toolDiameter} mm
// `);

//     // Initialize
//     gcode.push("G21 ; Set units to millimeters");
//     gcode.push("G90 ; Set to absolute positioning");
//     gcode.push(`G0 Z${this.settings.safeHeight} ; Move to safe height`);

//     // Sort panels by x position then y position for efficient cutting
//     const sortedPanels = [...result.placedPanels].sort((a, b) =>
//       a.y === b.y ? a.x - b.x : a.y - b.y
//     );

//     // Process each panel
//     for (const panel of sortedPanels) {
//       gcode.push(this.generatePanelCutPaths(panel));
//     }

//     // Footer
//     gcode.push("G0 Z" + this.settings.safeHeight + " ; Return to safe height");
//     gcode.push("M2 ; End program");

//     return gcode.join("\n");
//   }

//   private generatePanelCutPaths(panel: PlacedPanel): string {
//     const paths: string[] = [];
//     const { x, y, width, height } = panel;
//     const toolOffset = this.settings.toolDiameter / 2;

//     // Convert inches to mm
//     const xStart = x * 25.4;
//     const yStart = y * 25.4;
//     const xEnd = (x + width) * 25.4;
//     const yEnd = (y + height) * 25.4;

//     paths.push(
//       `;Cutting panel ${panel.originalPanel.label} (${width}" x ${height}")`
//     );

//     // Move to start position
//     paths.push(
//       `G0 X${xStart - toolOffset} Y${
//         yStart - toolOffset
//       } ; Move to start position`
//     );

//     // Cut rectangle
//     paths.push(
//       `G1 Z${this.settings.cutDepth} F${this.settings.plungeRate} ; Plunge to cutting depth`
//     );
//     paths.push(
//       `G1 X${xEnd + toolOffset} F${this.settings.feedRate} ; Cut bottom edge`
//     );
//     paths.push(`G1 Y${yEnd + toolOffset} ; Cut right edge`);
//     paths.push(`G1 X${xStart - toolOffset} ; Cut top edge`);
//     paths.push(`G1 Y${yStart - toolOffset} ; Cut left edge`);

//     // Return to safe height
//     paths.push(`G0 Z${this.settings.safeHeight} ; Return to safe height`);

//     return paths.join("\n");
//   }
// }

interface GcodeSettings {
  feedRate: number;
  plungeRate: number;
  cutDepth: number;
  safeHeight: number;
  toolDiameter: number;
}

export const createGcodeGenerator = (
  customSettings: Partial<GcodeSettings> = {}
) => {
  const settings: GcodeSettings = {
    feedRate: customSettings.feedRate || 1000,
    plungeRate: customSettings.plungeRate || 200,
    cutDepth: customSettings.cutDepth || -3,
    safeHeight: customSettings.safeHeight || 5,
    toolDiameter: customSettings.toolDiameter || 3.175,
  };

  const generateGcode = (result: OptimizationResult): string => {
    const gcode: string[] = [];

    gcode.push(";Panel Cutting G-code");
    gcode.push(";Generated by Panel Cutting Optimizer");
    gcode.push(`
;Settings:
;Feed Rate: ${settings.feedRate} mm/min
;Plunge Rate: ${settings.plungeRate} mm/min
;Cut Depth: ${settings.cutDepth} mm
;Safe Height: ${settings.safeHeight} mm
;Tool Diameter: ${settings.toolDiameter} mm
`);

    gcode.push("G21 ; Set units to millimeters");
    gcode.push("G90 ; Set to absolute positioning");
    gcode.push(`G0 Z${settings.safeHeight} ; Move to safe height`);

    const sortedPanels = [...result.placedPanels].sort((a, b) =>
      a.y === b.y ? a.x - b.x : a.y - b.y
    );

    for (const panel of sortedPanels) {
      gcode.push(generatePanelCutPaths(panel));
    }

    gcode.push(`G0 Z${settings.safeHeight} ; Return to safe height`);
    gcode.push("M2 ; End program");

    return gcode.join("\n");
  };

  const generatePanelCutPaths = (panel: PlacedPanel): string => {
    const paths: string[] = [];
    const { x, y, width, height } = panel;
    const toolOffset = settings.toolDiameter / 2;

    const xStart = x * 25.4;
    const yStart = y * 25.4;
    const xEnd = (x + width) * 25.4;
    const yEnd = (y + height) * 25.4;

    paths.push(
      `;Cutting panel ${panel.originalPanel.label} (${width}" x ${height}")`
    );
    paths.push(
      `G0 X${xStart - toolOffset} Y${
        yStart - toolOffset
      } ; Move to start position`
    );
    paths.push(
      `G1 Z${settings.cutDepth} F${settings.plungeRate} ; Plunge to cutting depth`
    );
    paths.push(
      `G1 X${xEnd + toolOffset} F${settings.feedRate} ; Cut bottom edge`
    );
    paths.push(`G1 Y${yEnd + toolOffset} ; Cut right edge`);
    paths.push(`G1 X${xStart - toolOffset} ; Cut top edge`);
    paths.push(`G1 Y${yStart - toolOffset} ; Cut left edge`);
    paths.push(`G0 Z${settings.safeHeight} ; Return to safe height`);

    return paths.join("\n");
  };

  return {
    generateGcode,
  };
};
